plugins {
    id 'java'
    id 'application'
}

group = 'edu.upc.prop.clusterxx'
version = '1.0-SNAPSHOT'

ext {
    javaMainClass = 'edu.upc.prop.clusterxx.drivers.Main'
}

application {
    mainClassName = javaMainClass
}

jar {
    manifest {
        attributes 'Main-Class': javaMainClass
    }
    destinationDirectory = file("$projectDir/EXE")
}

// Java toolchain configuration
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(22)
    }
}

// Source sets configuration
sourceSets {
    main {
        java {
            srcDirs = ['FONTS/src/main/java'] // Ruta al código fuente principal
        }
    }
    test {
        java {
            srcDirs = ['FONTS/src/test/java'] // Ruta al código de pruebas
        }
    }
}

// Repositories and dependencies
repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.google.code.gson:gson:2.8.9' // Librería Gson
    testImplementation 'junit:junit:4.13.2'          // Librería para pruebas JUnit
}

// Compile all classes (main and test)
task compileAllClasses(type: JavaCompile) {
    source = sourceSets.main.allSource + sourceSets.test.allSource
    classpath = sourceSets.main.compileClasspath + sourceSets.test.compileClasspath
    destinationDir = file("$buildDir/classes/java")
}

// Tasks to create JARs for drivers
task jarDriverPerfil(type: Jar) {
    dependsOn compileAllClasses
    archiveBaseName.set('DriverPerfil')
    archiveVersion.set('')
    from sourceSets.main.output
    manifest {
        attributes 'Main-Class': 'edu.upc.prop.clusterxx.drivers.DriverPerfil' // Ajusta si la clase está en otra ruta
    }
    destinationDirectory = file("$buildDir/EXE") // Ruta para guardar el JAR
}

task jarDriverDistribucio(type: Jar) {
    dependsOn compileAllClasses
    archiveBaseName.set('DriverDistribucio')
    archiveVersion.set('')
    from sourceSets.main.output
    manifest {
        attributes 'Main-Class': 'edu.upc.prop.clusterxx.drivers.DriverDistribucio' // Ajusta si la clase está en otra ruta
    }
    destinationDirectory = file("$buildDir/EXE")
}

task jarDriverPrestatgeria(type: Jar) {
    dependsOn compileAllClasses
    archiveBaseName.set('DriverPrestatgeria')
    archiveVersion.set('')
    from sourceSets.main.output
    manifest {
        attributes 'Main-Class': 'edu.upc.prop.clusterxx.drivers.DriverPrestatgeria' // Ajusta si la clase está en otra ruta
    }
    destinationDirectory = file("$buildDir/EXE")
}

task jarAllDrivers {
    dependsOn jarDriverPerfil, jarDriverDistribucio, jarDriverPrestatgeria
    group = 'build'
    description = 'Generates JAR files for all drivers'
}

// Clean task
clean {
    delete rootProject.buildDir
}
