
import struct

def lz77_decode(encoded_data):
    decoded_text = ""
    
    for entry in encoded_data:
        char, length, offset = entry
        
        if length == 0 and offset == 0:
            decoded_text += char  # Caracter nuevo sin referencia
        else:
            longitud = len(decoded_text)
            for j in range(length):
                decoded_text += decoded_text[(longitud-offset+j)]
            decoded_text += char
    
    return decoded_text

def decode_lzss_4_12(encoded_bits: str) -> str:
    """
    Decodifica el texto (UTF-8) codificado con LZSS usando 4 bits para match length y 12 bits para offset.
    """
    # Función auxiliar para leer 'n' bits de la cadena
    def read_bits(bits, idx, n):
        return int(bits[idx:idx+n], 2), idx + n

    decoded_bytes = bytearray()
    i = 0

    while i < len(encoded_bits):
        # Lee 8 bits de marcas (flags)
        flag_byte, i = read_bits(encoded_bits, i, 8)
        for bit_pos in range(8):
            if i >= len(encoded_bits):
                break

            # Verifica si el bit actual es literal (0) o token (1)
            if (flag_byte & (1 << (7-bit_pos))) == 0:
                # Literal
                literal_val, i = read_bits(encoded_bits, i, 8)
                decoded_bytes.append(literal_val)
            else:
                # Token (match length + offset)
                length,i = read_bits(encoded_bits, i, 4)
                length += 1
                offset,i = read_bits(encoded_bits, i, 12)
                offset += 1
            
                start_pos = len(decoded_bytes) - offset
                if start_pos < 0 or start_pos >= len(decoded_bytes):
                    # Offset inválido: rompe o salta
                    break
                for _ in range(length):
                    decoded_bytes.append(decoded_bytes[start_pos])
                    start_pos += 1

    return decoded_bytes.decode('utf-8', errors='replace')


def parse_deflate(bitstream):

    # Tabla de Huffman estática para los literales/longitudes según RFC 1951
    huffman_literals = {}
    
    # Rango 0 - 143: 8 bits (00110000 - 10111111)
    for i in range(0, 144):
        huffman_literals[i] = format(0x30 + i, '08b')
    
    # Rango 144 - 255: 9 bits (110010000 - 111111111)
    for i in range(144, 256):
        huffman_literals[i] = format(0x190 + (i - 144), '09b')
    
    # Rango 256 - 279: 7 bits (0000000 - 0010111)
    for i in range(256, 280):
        huffman_literals[i] = format(i - 256, '07b')
    
    # Rango 280 - 287: 8 bits (11000000 - 11000111)
    for i in range(280, 288):
        huffman_literals[i] = format(0xC0 + (i - 280), '08b')
   
    tabla_leng = {
        257: {"ExtraBits": 0, "Length": 3},
        258: {"ExtraBits": 0, "Length": 4},
        259: {"ExtraBits": 0, "Length": 5},
        260: {"ExtraBits": 0, "Length": 6},
        261: {"ExtraBits": 0, "Length": 7},
        262: {"ExtraBits": 0, "Length": 8},
        263: {"ExtraBits": 0, "Length": 9},
        264: {"ExtraBits": 0, "Length": 10},
        265: {"ExtraBits": 1, "Length": 11},
        266: {"ExtraBits": 1, "Length": 13},
        267: {"ExtraBits": 1, "Length": 15},
        268: {"ExtraBits": 1, "Length": 17},
        269: {"ExtraBits": 2, "Length": 19},
        270: {"ExtraBits": 2, "Length": 23},
        271: {"ExtraBits": 2, "Length": 27},
        272: {"ExtraBits": 2, "Length": 31},
        273: {"ExtraBits": 3, "Length": 35},
        274: {"ExtraBits": 3, "Length": 43},
        275: {"ExtraBits": 3, "Length": 51},
        276: {"ExtraBits": 3, "Length": 59},
        277: {"ExtraBits": 4, "Length": 67},
        278: {"ExtraBits": 4, "Length": 83},
        279: {"ExtraBits": 4, "Length": 99},
        280: {"ExtraBits": 4, "Length": 115},
        281: {"ExtraBits": 5, "Length": 131},
        282: {"ExtraBits": 5, "Length": 163},
        283: {"ExtraBits": 5, "Length": 195},
        284: {"ExtraBits": 5, "Length": 227},
        285: {"ExtraBits": 0, "Length": 258},
    }

    tabla_dict = {
        0: {"ExtraBits": 0, "Distance": 1},
        1: {"ExtraBits": 0, "Distance": 2},
        2: {"ExtraBits": 0, "Distance": 3},
        3: {"ExtraBits": 0, "Distance": 4},
        4: {"ExtraBits": 1, "Distance": 5},
        5: {"ExtraBits": 1, "Distance": 7},
        6: {"ExtraBits": 2, "Distance": 9},
        7: {"ExtraBits": 2, "Distance": 13},
        8: {"ExtraBits": 3, "Distance": 17},
        9: {"ExtraBits": 3, "Distance": 25},
        10: {"ExtraBits": 4, "Distance": 33},
        11: {"ExtraBits": 4, "Distance": 49},
        12: {"ExtraBits": 5, "Distance": 65},
        13: {"ExtraBits": 5, "Distance": 97},
        14: {"ExtraBits": 6, "Distance": 129},
        15: {"ExtraBits": 6, "Distance": 193},
        16: {"ExtraBits": 7, "Distance": 257},
        17: {"ExtraBits": 7, "Distance": 385},
        18: {"ExtraBits": 8, "Distance": 513},
        19: {"ExtraBits": 8, "Distance": 769},
        20: {"ExtraBits": 9, "Distance": 1025},
        21: {"ExtraBits": 9, "Distance": 1537},
        22: {"ExtraBits": 10, "Distance": 2049},
        23: {"ExtraBits": 10, "Distance": 3073},
        24: {"ExtraBits": 11, "Distance": 4097},
        25: {"ExtraBits": 11, "Distance": 6145},
        26: {"ExtraBits": 12, "Distance": 8193},
        27: {"ExtraBits": 12, "Distance": 12289},
        28: {"ExtraBits": 13, "Distance": 16385},
        29: {"ExtraBits": 13, "Distance": 24577},
    }
    
    output = bytearray()
    i = 0
    while i < len(bitstream):
        matched = False
        for key, value in huffman_literals.items():
            if bitstream[i:].startswith(value):
                matched = True
                if key < 256:  # Es un literal ASCII
                    output.append(key)
                    i += len(value)
                    break
                elif key == 256:  # Fin del bloque
                    return output
                else:  # Es un código de longitud
                    length_entry = tabla_leng[key]
                    match_length = length_entry["Length"]
                    extra_bits = length_entry["ExtraBits"]
                    
                    i += len(value)
                    if extra_bits > 0:
                        extra_length_bits = ""
                        for j in range(extra_bits):
                                    extra_length_bits += bitstream[i]
                                    i += 1
                        #extra_length_bits = bitstream[i:(i + extra_bits)]
                        match_length += int(extra_length_bits, 2)
                        #i += extra_bits

                    for d_key, d_value in tabla_dict.items():
                        re = format(d_key, '05b')
                        if bitstream[i:].startswith(format(d_key, '05b')):
                            distance = d_value["Distance"]
                            extra_bits = d_value["ExtraBits"]
                            i += 5
                            
                            if extra_bits > 0:
                                extra_distance_bits = ""
                                for j in range(extra_bits):
                                    extra_distance_bits += bitstream[i]
                                    i += 1
                                #extra_distance_bits = bitstream[i:(i + extra_bits)]
                                distance += int(extra_distance_bits, 2)
                                #i += extra_bits
                            
                            # Copiar desde la distancia especificada
                            length = len(output)
                            for j in range(match_length):
                                output.append(output[length - distance + j])
                            break
                    break
        
        if not matched:
            raise ValueError("Error en la decodificación: bitstream inválido o incompleto")
    
    return output.decode(encoding='utf-8')

def lz78_decode(compressed):
    dictionary = []
    decoded_message = ""
    
    for index, char in compressed:
        if index == 0:
            dictionary.append(char)
            decoded_message += char
        else:
            entry = dictionary[index - 1] + char
            dictionary.append(entry)
            decoded_message += entry
    
    return decoded_message

def lzw_decode(encoded_data, initial_dict):
    """
    Decodifica un mensaje codificado con LZW, mostrando cada paso de la decodificación.
    
    :param encoded_data: Lista de enteros codificados con LZW.
    :param initial_dict: Lista de caracteres iniciales del diccionario.
    :return: Cadena decodificada.
    """
    # Construir el diccionario inicial
    dictionary = {i+1: char for i, char in enumerate(initial_dict)}
    
    # Inicialización
    decoded_string = dictionary[encoded_data[0]]
    previous = decoded_string
    next_code = len(dictionary) +1
    
    # Iterar sobre el resto de la secuencia codificada
    for code in encoded_data[1:]:
        if code in dictionary:
            current = dictionary[code]
        elif code == next_code:  # Caso especial
            current = previous + previous[0]
        else:
            break
        
        
        decoded_string += current
        dictionary[next_code] = previous + current[0]
        next_code += 1
        previous = current
    
    return decoded_string

#PREGUNTA 1 !!!
encoded_message = [['T', 0, 0], ['h', 0, 0], ['e', 0, 0], [' ', 0, 0], ['i', 1, 4], ['m', 0, 0], ['M', 2, 5], ['a', 0, 0], ['c', 0, 0], ['i', 1, 11], ['n', 0, 0], [',', 1, 13], ['H', 1, 14], ['(', 0, 0], ['r', 1, 18], ['b', 0, 0], ['t', 2, 3], [')', 0, 0], ['G', 1, 24], ['o', 2, 10], ['g', 1, 11], [')', 1, 27], ['W', 1, 28], ['l', 1, 31], ['s', 1, 1], ['[', 1, 25], ['1', 0, 0], ['8', 0, 0], ['9', 0, 0], ['5', 0, 0], [']', 0, 0], ['.', 2, 7], [']', 2, 1], ['“', 1, 28], ['T', 0, 0], ['h', 0, 0], [' ', 1, 29], ['a', 1, 22], ['n', 0, 0], ['d', 0, 0], ['c', 1, 24], ['p', 1, 5], ['w', 2, 10], ['s', 1, 10], ['m', 1, 25], ['i', 0, 0], ['t', 1, 12], ['y', 0, 0], ['a', 1, 31], [' ', 2, 19], ['v', 0, 0], ['g', 1, 24], ['u', 0, 0], ['.', 1, 30], ['I', 1, 31], ['s', 5, 23], ['i', 1, 21], ['l', 0, 0], [' ', 1, 1], ['o', 0, 0], [' ', 1, 23], ['h', 1, 29], [' ', 1, 20], ['i', 1, 3], ['s', 2, 12], ['d', 1, 16], ['u', 2, 9], ['p', 0, 0], ['w', 3, 18], ['c', 2, 15], [' ', 1, 21], ['i', 2, 24], [' ', 1, 19], ['o', 1, 28], ['s', 1, 18], ['n', 2, 31], ['w', 1, 21], ['s', 1, 26], ['a', 1, 16], ['d', 1, 26], [',', 1, 17], ['a', 1, 29], [' ', 2, 6], ['e', 2, 27], ['h', 2, 16], ['l', 2, 27], ['e', 1, 17], ['r', 0, 0], ['r', 1, 29], ['s', 1, 29], ['a', 2, 14], ['b', 0, 0], ['v', 1, 14], ['m', 2, 20], ['g', 2, 23], ['e', 1, 17], ['y', 0, 0], ['n', 2, 14], [' ', 1, 25], ['i', 1, 27], ['.', 1, 14], ['I', 1, 28], ['s', 1, 30], ['w', 1, 26], ['t', 1, 29], ['e', 2, 20], [' ', 1, 8], ['o', 2, 26], ['i', 1, 11], ['g', 1, 25], ['c', 5, 29], ['h', 0, 0], ['g', 2, 6], ['l', 4, 13], ['k', 1, 18], [' ', 1, 28], ['p', 0, 0], ['u', 0, 0], ['f', 0, 0], ['s', 1, 1], ['o', 1, 24], [' ', 1, 5], ['v', 0, 0], ['p', 1, 28], ['u', 1, 6], ['r', 0, 0], [',', 0, 0], ['n', 1, 31], ['w', 1, 12], ['b', 1, 26], ['o', 1, 8], ['n', 1, 5], ['g', 6, 11], ['e', 1, 19], ['n', 1, 1], [';', 0, 0], ['t', 1, 30], ['h', 0, 0], ['y', 1, 7], ['w', 4, 12], ['s', 2, 22], ['p', 0, 0], ['a', 2, 19], ['d', 0, 0], ['h', 3, 8], ['i', 0, 0], ['v', 0, 0], ['r', 1, 28], ['d', 1, 30], ['a', 2, 18], ['n', 0, 0], [' ', 1, 15], ['a', 1, 21], ['s', 1, 24], [' ', 2, 12], ['w', 1, 25], ['y', 1, 27], ['.', 0, 0], ['I', 1, 27], ['a', 2, 29], [' ', 1, 9], ['h', 0, 0], ['u', 0, 0], ['g', 0, 0], [' ', 1, 30], ['b', 0, 0], ['i', 1, 5], ['l', 0, 0], ['i', 1, 30], ['n', 0, 0], ['s', 1, 10], ['r', 1, 27], ['s', 1, 9], ['u', 2, 15], ['p', 0, 0], ['f', 1, 29], ['i', 1, 27], ['t', 1, 15], ['a', 1, 29], ['d', 1, 19], ['r', 4, 10], [',', 0, 0], ['p', 5, 10], ['s', 1, 20], [' ', 1, 29], ['l', 0, 0], ['k', 1, 24], ['e', 0, 0], ['d', 1, 30], ['e', 1, 18], ['m', 1, 27], ['.', 1, 13], ['T', 1, 28], ['h', 0, 0], ['w', 2, 12], ['o', 1, 4], ['e', 1, 20], ['s', 1, 28], ['u', 0, 0], ['f', 1, 19], ['c', 1, 31], ['o', 2, 26], [' ', 1, 6], ['t', 0, 0], ['e', 3, 21], ['r', 1, 31], [' ', 2, 7], ['e', 1, 21], ['m', 1, 31], ['d', 1, 27], ['c', 1, 28], ['a', 1, 17], ['n', 0, 0], ['g', 0, 0], ['—', 2, 8], ['l', 2, 12], ['i', 1, 28], [' ', 2, 10], ['d', 2, 14], ['f', 1, 27], ['o', 1, 11], ['w', 0, 0], ['u', 4, 12], ['e', 2, 12], ['r', 0, 0], ['m', 1, 18], ['y', 0, 0], ['e', 1, 21], ['e', 1, 3], ['s', 0, 0], ['.', 0, 0], ['T', 1, 27], ['h', 0, 0], [' ', 1, 14], ['i', 1, 26], ['t', 0, 0], ['l', 1, 1], ['h', 2, 7], ['a', 0, 0], ['s', 2, 27], ['u', 1, 26], ['p', 0, 0], ['o', 0, 0], [' ', 1, 7], ['h', 1, 16], ['d', 2, 22], ['a', 1, 22], ['s', 1, 25], ['a', 3, 10], [' ', 1, 29], ['r', 0, 0], ['g', 1, 29], ['s', 1, 13], ['e', 1, 20], ['d', 2, 7], ['m', 1, 31], ['y', 0, 0], ['s', 1, 29], ['p', 0, 0], ['e', 1, 29], ['r', 2, 9], ['c', 1, 30], ['o', 4, 6], ['u', 0, 0], ['n', 0, 0], ['f', 2, 21], ['s', 1, 12], [' ', 3, 30], ['n', 1, 18], ['.', 8, 11], ['P', 1, 31], ['e', 1, 26], ['e', 1, 20], ['t', 1, 27], ['l', 0, 0], ['y', 0, 0], ['I', 1, 29], ['n', 1, 31], ['o', 0, 0], ['d', 2, 30], ['t', 1, 30], ['h', 0, 0], ['t', 1, 27], ['e', 3, 5], ['s', 1, 27], ['u', 0, 0], [' ', 1, 24], ['b', 0, 0], ['l', 1, 30], ['s', 2, 13], ['w', 0, 0], ['y', 1, 18], ['u', 3, 25], ['p', 0, 0], ['a', 1, 28], ['d', 1, 18], ['d', 1, 27], ['o', 0, 0], ['n', 1, 15], [',', 0, 0], ['f', 1, 29], ['r', 0, 0], ['m', 1, 7], ['o', 2, 25], ['s', 1, 30], ['i', 1, 31], ['c', 0, 0], [' ', 1, 28], ['o', 1, 5], [',', 9, 12], ['i', 1, 27], [' ', 1, 31], ['a', 0, 0], ['m', 1, 27], ['u', 2, 6], ['e', 1, 27], ['o', 1, 25], ['r', 0, 0], ['l', 1, 28], ['s', 1, 31], [',', 1, 28], ['n', 2, 18], ['d', 0, 0], ['t', 1, 25], ['h', 0, 0], ['t', 1, 24], ['c', 1, 30], ['n', 1, 19], ['e', 1, 16], ['q', 0, 0], ['e', 1, 28], ['t', 1, 31], ['y', 1, 25], ['m', 1, 31], ['p', 2, 3], ['c', 1, 26], [' ', 1, 15], ['w', 0, 0], ['s', 1, 31], ['o', 1, 30], ['v', 0, 0], ['r', 1, 23], ['a', 1, 30], ['y', 1, 19], ['a', 1, 29], ['m', 4, 7], ['i', 0, 0], ['n', 0, 0], ['u', 0, 0], ['t', 0, 0], [';', 1, 25], ['n', 2, 17], ['d', 0, 0], [' ', 7, 12], ['b', 0, 0], [' ', 1, 27], ['t', 7, 10], ['h', 0, 0], ['w', 2, 14], ['i', 1, 4], ['s', 3, 20], ['o', 1, 31], [' ', 1, 9], ['f', 0, 0], ['l', 0, 0], ['a', 0, 0], ['h', 1, 8], ['d', 1, 22], ['a', 1, 30], ['c', 0, 0], ['r', 0, 0], ['s', 1, 14], [' ', 1, 18], ['o', 5, 30], ['l', 1, 11], [',', 1, 17], ['n', 2, 18], ['v', 2, 22], ['i', 2, 5], [',', 4, 31], ['w', 5, 14], ['s', 1, 19], ['f', 1, 29], ['l', 1, 29], ['o', 1, 29], ['e', 1, 9], ['b', 2, 27], ['y', 0, 0], ['t', 1, 30], [' ', 2, 26], ['r', 1, 7], ['i', 0, 0], ['g', 0, 0], ['t', 1, 7], [',', 0, 0], ['e', 4, 8], [' ', 1, 28], ['r', 1, 11], ['e', 1, 26], ['n', 0, 0], ['o', 1, 27], ['s', 2, 9], ['p', 0, 0], ['n', 2, 24], ['.', 1, 25], ['EOF', 0, 0]]
decoded_message = lz77_decode(encoded_message)
print( "PREGUNTA 1 !!!!" + "\n")
print(decoded_message + "\n")

#PREGUNTA 2 !!!
bitstream
decoded_text = decode_lzss_4_12(bitstream)
print( "PREGUNTA 2 !!!!" + "\n")
print(decoded_text + "\n")


#PREGUNTA 3 !!!!
bitstream
decoded_text = decode_lzss_4_12(bitstream)
print( "PREGUNTA 3 !!!!" + "\n")
print(decoded_text + "\n")

#PREGUNTA 4 !!!!
bitstream
resultado = parse_deflate(bitstream)
print( "PREGUNTA 4 !!!!" + "\n")
print(resultado + "\n")

#PREGUNTA 5 !!!!
bitstream
resultado = parse_deflate(bitstream)
print( "PREGUNTA 5 !!!!" + "\n")
print(resultado + "\n")

#PREGUNTA 6 !!!!
compressed_data = [[0, 'T'], [0, 'h'], [0, 'e'], [0, ' '], [0, 'I'], [0, 'n'], [0, 'v'], [0, 'i'], [0, 's'], [8, 'b'], [0, 'l'], [3, ' '], [0, 'M'], [0, 'a'], [6, ','], [4, 'H'], [0, '('], [3, 'r'], [0, 'b'], [18, 't'], [0, ')'], [4, 'G'], [17, 'e'], [0, 'o'], [0, 'r'], [0, 'g'], [3, ')'], [4, 'W'], [3, 'l'], [11, 's'], [4, '['], [0, '1'], [0, '8'], [0, '9'], [0, '7'], [0, ']'], [31, '.'], [0, '.'], [38, ']'], [4, 'M'], [0, 'y'], [4, 'i'], [0, 'd'], [3, 'a'], [4, 'w'], [14, 's'], [4, 't'], [24, ' '], [0, 'p'], [25, 'o'], [0, 'c'], [0, 'u'], [25, 'e'], [4, 'c'], [11, 'o'], [0, 't'], [2, 'i'], [6, 'g'], [47, 'o'], [4, 'm'], [14, 'k'], [12, 'm'], [41, 's'], [29, 'f'], [4, 'a'], [60, 'u'], [0, 'f'], [67, 'l'], [3, 'd'], [4, 'b'], [52, 't'], [65, 'c'], [51, 'e'], [49, 't'], [14, 'b'], [11, 'e'], [4, 'f'], [8, 'g'], [52, 'r'], [3, ','], [59, ' '], [26, 'e'], [56, ' '], [0, 'm'], [24, 'n'], [3, 'y'], [0, ','], [65, 'n'], [43, ' '], [56, 'h'], [3, 'n'], [81, 'r'], [3, 'c'], [24, 'v'], [18, ' '], [84, 'y'], [70, 'o'], [24, 'k'], [9, ' '], [14, 'n'], [89, 'p'], [14, 'r'], [73, 'l'], [99, 'w'], [2, 'e'], [53, ' '], [90, 'e'], [41, ' '], [14, 'w'], [14, 'i'], [56, 'e'], [89, 'm'], [80, ' '], [56, 'a'], [0, 'k'], [12, 'a'], [4, 'l'], [24, 'd'], [26, 'i'], [58, ' '], [9, 'o'], [84, 'e'], [0, 'w'], [105, 'r'], [116, 'n'], [89, 'e'], [11, 'a'], [19, 'o'], [25, 'a'], [111, ' '], [49, 'l'], [100, 's'], [77, 'o'], [25, ' '], [107, ' '], [51, 'o'], [84, 'p'], [76, 't'], [12, 'r'], [44, 'l'], [8, 's'], [14, 't'], [8, 'o'], [6, ' '], [24, 'f'], [47, 'h'], [116, 'd'], [7, 'a'], [6, 't'], [14, 'g'], [3, 's'], [60, 'y'], [42, 'n'], [7, 'i'], [9, 'i'], [19, 'i'], [11, 'i'], [56, 'y'], [4, 'g'], [14, 'v'], [62, 'e'], [4, '('], [46, ' '], [5, ' '], [9, 't'], [8, 'l'], [11, ' '], [8, 'm'], [150, 'i'], [6, 'e'], [43, ')'], [4, 'o'], [7, 'e'], [134, 'm'], [108, 'f'], [29, 'l'], [24, 'w'], [0, '-'], [122, 'n'], [38, ' '], [0, 'C'], [55, 's'], [8, 'n'], [26, ' '], [56, 'i'], [122, ' '], [102, 'r'], [8, 'v'], [69, ' '], [0, 'q'], [52, 'i'], [51, 'k'], [11, 'y'], [4, 'e'], [6, 'o'], [52, 'g'], [2, '.'], [4, 'I'], [83, 'c'], [24, 'u'], [11, 'd'], [4, 'n'], [24, 't'], [4, 'h'], [160, 'e'], [70, 'e'], [91, ' '], [84, 'o'], [106, 't'], [2, 'a'], [144, 'a'], [144, 'h'], [200, 'r'], [65, 'f'], [111, 'r'], [198, ' '], [56, 'o'], [98, ' '], [52, 'p'], [152, ' '], [49, 'o'], [155, 't'], [143, 'n'], [172, 'n'], [146, 'e'], [60, 'a'], [56, 't'], [53, 's'], [9, 'e'], [99, 'b'], [3, 'f'], [24, 'r'], [12, 'I'], [202, 'o'], [185, 'c'], [189, 't'], [105, ' '], [19, 'l'], [183, 'd'], [99, 'o'], [67, ' '], [135, 'w'], [239, 'o'], [123, 's'], [206, 'i'], [120, 'd'], [129, 'w'], [15, ' '], [100, 'd'], [54, 'u'], [165, 'o'], [122, 'r'], [230, 'e'], [183, 'g'], [226, 'r'], [51, 'h'], [189, 'd'], [24, 'o'], [25, 'w'], [102, 'd'], [180, 'A'], [6, 'd'], [225, 'n'], [65, ' '], [6, 'u'], [84, 'b'], [95, 'o'], [241, 'b'], [25, 'i'], [9, 'k'], [4, 'y'], [200, 'n'], [184, 'm'], [207, 'b'], [3, 'g'], [100, ' '], [123, 'i'], [90, ' '], [53, 'm'], [102, 'k'], [75, 'l'], [116, 'l'], [14, 'c'], [269, 't'], [108, 't'], [48, 't'], [8, 'd'], [108, 'u'], [49, ' '], [135, 'g'], [258, 'd'], [99, 't'], [210, 't'], [4, 'r'], [3, 'm'], [110, 'n'], [257, 'i'], [165, 'u'], [25, 'b'], [69, '.'], [216, 'l'], [231, 't'], [220, 'l'], [110, 'r'], [65, 's'], [225, ' '], [51, 'r'], [177, 'd'], [99, 'd'], [168, 'i'], [6, 'i'], [9, 'h'], [69, ','], [88, 'd'], [4, 'p'], [50, 'w'], [76, 'd'], [54, 'a'], [71, 'i'], [200, 's'], [193, ' '], [200, 't'], [153, 't'], [286, 'h'], [12, 'l'], [151, 's'], [4, 'd'], [151, 'o'], [127, 't'], [12, 'p'], [102, 't'], [240, 'f'], [306, 's'], [2, 'o'], [49, '.'], [216, 'w'], [163, 'r'], [140, 'l'], [108, 's'], [79, 'p'], [269, 's'], [236, 'o'], [172, 'b'], [229, 'r'], [173, ' '], [334, 'w'], [294, 'a'], [49, 'i'], [43, 'l'], [285, 'h'], [12, 'y'], [272, 'g'], [60, 'e'], [211, 'n'], [89, 'w'], [24, 'm'], [207, 'w'], [57, 'p'], [49, 'e'], [89, 'a'], [123, 'a'], [350, 'e'], [159, 'o'], [118, 's'], [327, 'i'], [9, 'p'], [127, 'y'], [189, 'f'], [232, ' '], [9, 'a'], [76, ' '], [43, 'u'], [269, 'n'], [184, 't'], [237, 'd'], [14, 'y'], [261, 'l'], [167, 't'], [237, 'b'], [24, 'x'], [151, ' '], [145, ' '], [26, 'o'], [364, ','], [306, 'h'], [100, 'g'], [254, ' '], [67, 'a'], [19, 'r'], [8, 'c'], [9, ','], [306, 'f'], [151, 't'], [258, 'n'], [332, ' '], [127, 'c'], [113, 't'], [379, 'o'], [0, 'x'], [381, 'o'], [241, 's'], [123, 'e'], [3, 't'], [99, 'i'], [144, 't'], [237, 'g'], [50, 'c'], [18, 'y'], [4, 's'], [93, 't'], [223, ','], [306, 'd'], [141, 'p'], [367, 's'], [172, 'f'], [146, 'i'], [99, 'a'], [262, ' '], [90, 'a'], [56, ','], [45, 'e'], [106, 'b'], [3, 'i'], [120, 'w'], [358, 'p'], [257, 'o'], [123, 'n'], [87, ' '], [67, 'o'], [201, 'e'], [89, 'u'], [49, ','], [409, 'l'], [14, 'p'], [359, 'd'], [323, 'o'], [47, 'i'], [43, 'y'], [294, 'e'], [73, 'p'], [114, 'c'], [76, 's'], [428, 'a'], [418, 'e'], [173, 'r'], [41, 't'], [57, 'n'], [374, 'h'], [142, ' '], [136, 'u'], [201, ' '], [195, 't'], [206, ' '], [114, 'k'], [207, 'd'], [177, 'n'], [314, ' '], [49, 'u'], [83, 'a'], [361, 'y'], [204, 'a'], [89, 's'], [105, 'e'], [56, 's'], [415, ' '], [121, 'm'], [12, 'c'], [24, 'a'], [25, 's'], [12, 's'], [56, 'u'], [67, 'f'], [117, 'i'], [115, 'e'], [409, 'a'], [192, 'i'], [120, 'f'], [11, 'u'], [120, 'o'], [445, ' '], [107, 'm'], [180, 'F'], [183, 'a'], [11, 'l'], [108, 'a'], [484, ' '], [135, 'c'], [210, 'i'], [469, ' '], [402, 'r'], [12, 't'], [79, 'n'], [189, 'u'], [289, 'o'], [405, 'o'], [306, 'c'], [272, 't'], [18, 's'], [428, 'l'], [44, 'v'], [387, 't'], [237, 'f'], [55, 'o'], [134, 'c'], [76, 'a'], [25, '.'], [4, 'D'], [8, 'r'], [410, 'l'], [108, 'e'], [283, 'h'], [465, 't'], [105, 's'], [351, 'o'], [52, 'n'], [184, 'p'], [3, 'o'], [131, 'e'], [461, 'd'], [327, 'o'], [170, ','], [204, 'e'], [172, 'r'], [409, 'h'], [62, 'a'], [43, 'e'], [315, 'r'], [356, 'p'], [56, 'l'], [175, 'o'], [134, 't'], [375, 'o'], [369, 'w'], [8, 't'], [2, ' '], [9, 'u'], [256, ' '], [276, 'e'], [399, 'p'], [228, 's'], [223, ' '], [382, 'a'], [311, 'm'], [142, 'i'], [85, ' '], [163, 'I'], [461, 'v'], [139, 'a'], [53, 'l'], [108, 'o'], [19, 's'], [18, 'v'], [189, 'i'], [211, ' '], [312, 'o'], [289, 'a'], [9, 's'], [141, 't'], [100, 't'], [206, 'f'], [232, 'e'], [180, 'T'], [105, 'n'], [318, 'm'], [116, ' '], [55, 't'], [465, 'y'], [352, 's'], [215, 's'], [409, 'c'], [142, 't'], [18, 'i'], [120, 's'], [109, 'd'], [52, 's'], [459, 'n'], [89, 'c'], [187, 'y'], [387, 'p'], [110, 'l'], [417, 'n'], [89, 'b'], [50, 'o'], [84, 's'], [180, 'I'], [519, ' '], [217, ' '], [43, 'o'], [43, 'g'], [491, 'o'], [159, 'e'], [83, 'o'], [71, ' '], [382, 't'], [237, 'w'], [376, ','], [457, 'a'], [404, 't'], [45, 'a'], [391, ' '], [96, ' '], [100, 'k'], [371, 'g'], [203, ' '], [298, 'n'], [184, 'w'], [534, 'h'], [333, 'a'], [123, 'd'], [575, 't'], [482, 'o'], [134, 's'], [356, 'e'], [437, 'm'], [113, 'w'], [249, 'e'], [373, 'g'], [146, 'r'], [200, 'g'], [535, 't'], [237, 's'], [361, 't'], [105, 'd'], [457, 'd'], [280, 'e'], [170, 'd'], [327, 'e'], [49, 'a'], [25, 't'], [179, 't'], [600, 'I'], [54, 'o'], [52, 'l'], [89, 'h'], [44, 'r'], [306, 'b'], [583, 'm'], [417, 't'], [45, 'o'], [25, 'k'], [261, 'n'], [360, 't'], [117, 'a'], [165, ' '], [14, ' '], [383, 'o'], [634, 'o'], [79, ' '], [369, 'm'], [561, ' '], [14, 'f'], [215, ' '], [135, 's'], [334, 'p'], [586, 'b'], [3, 'e'], [144, 'c'], [182, 'e'], [43, ','], [564, 'e'], [264, 'n'], [24, 'i'], [229, ' '], [382, 'l'], [24, 'c'], [115, 'i'], [246, 'o'], [232, 's'], [180, 'S'], [166, 'e'], [6, 'c'], [467, 'a'], [186, 'u'], [221, 'n'], [306, 'p'], [396, 'e'], [443, 'n'], [89, 'I'], [133, 'u'], [418, 'm'], [63, 'e'], [11, 'f'], [599, 'n'], [526, 'r'], [501, 'h'], [50, 'u'], [26, 'h'], [306, 'v'], [46, 't'], [457, 'i'], [149, 'r'], [390, 'a'], [130, 's'], [654, 's'], [428, 'g'], [14, 'l'], [76, 'r'], [8, 'e'], [600, 's'], [346, '-'], [637, 's'], [512, 'h'], [330, 'l'], [283, 'e'], [443, 'l'], [85, 'e'], [585, 't'], [599, 's'], [4, 'v'], [408, ' '], [165, 'i'], [484, ';'], [153, ' '], [706, ' '], [131, 'a'], [73, ' '], [164, 'r'], [295, 'e'], [266, 'e'], [134, 'p'], [46, 's'], [387, 'n'], [635, ' '], [714, 'o'], [241, 't'], [237, 'T'], [203, 't'], [91, 'h'], [14, 'm'], [4, 'C'], [213, 't'], [4, 'R'], [468, 'd'], [194, 'n'], [56, 'r'], [100, 'c'], [381, 'a'], [418, 'l'], [558, 'e'], [311, 'n'], [374, 'o'], [306, 't'], [434, 'p'], [387, 'o'], [268, 'o'], [203, '-'], [463, 'l'], [395, 't'], [237, 'p'], [721, 'e'], [469, '-'], [19, 'y'], [38, 'EOF']]
decoded_text = lz78_decode(compressed_data)
print( "PREGUNTA 6 !!!!" + "\n")
print(decoded_text + "\n")

#PREGUNTA 7 !!!!
# Datos proporcionados
encoded_data = [20, 33, 30, 1, 20, 34, 37, 53, 16, 26, 28, 33, 34, 38, 30, 4, 1, 14, 2, 30, 41, 27, 70, 43, 3, 1, 13, 69, 39, 41, 32, 30, 75, 22, 30, 36, 36, 42, 1, 24, 7, 9, 10, 8, 25, 89, 6, 97, 95, 1, 23, 21, 54, 52, 54, 56, 53, 20, 41, 26, 45, 85, 36, 70, 49, 88, 18, 30, 43, 44, 41, 38, 1, 50, 19, 39, 1, 15, 1, 28, 26, 57, 1, 27, 60, 35, 6, 1, 12, 79, 1, 26, 1, 36, 39, 38, 32, 1, 43, 106, 127, 1, 37, 44, 42, 43, 1, 33, 110, 53, 72, 30, 122, 63, 42, 162, 42, 34, 27, 113, 1, 44, 40, 145, 148, 104, 37, 60, 62, 64, 137, 51, 160, 36, 63, 35, 63, 147, 42, 44, 28, 28, 30, 42, 167, 174, 39, 31, 175, 53, 29, 26, 47, 88, 26, 38, 29, 1, 38, 34, 32, 33, 43, 88, 46, 26, 88, 41, 193, 44, 57, 29, 66, 43, 104, 189, 122, 32, 39, 156, 228, 36, 29, 162, 141, 32, 26, 63, 223, 225, 35, 47, 133, 36, 44, 30, 137, 128, 27, 218, 26, 224, 30, 207, 46, 34, 224, 1, 32, 250, 43, 70, 1, 31, 218, 253, 39, 37, 181, 104, 31, 244, 28, 119, 251, 187, 129, 145, 43, 39, 120, 88, 197, 199, 143, 205, 207, 30, 27, 72, 207, 286, 263, 144, 46, 253, 269, 53, 158, 206, 88, 42, 40, 44, 122, 134, 28, 35, 215, 41, 207, 172, 174, 252, 1, 29, 34, 26, 87, 137, 11, 156, 36, 216, 156, 128, 42, 26, 46, 235, 237, 122, 314, 316, 37, 1, 42, 158, 29, 39, 46, 282, 198, 33, 280, 165, 42, 239, 53, 30, 45, 34, 233, 38, 192, 342, 315, 30, 130, 353, 156, 33, 220, 205, 256, 47, 297, 165, 223, 39, 39, 66, 61, 205, 81, 291, 206, 1, 40, 216, 165, 222, 141, 377, 229, 52, 41, 88, 130, 57, 137, 17, 218, 165, 38, 43, 36, 47, 66, 46, 52, 332, 176, 34, 86, 34, 174, 316, 318, 1, 215, 204, 156, 48, 70, 371, 151, 42, 323, 307, 162, 253, 336, 40, 30, 296, 151, 72, 236, 332, 126, 218, 28, 39, 32, 209, 165, 1, 280, 41, 438, 46, 122, 40, 218, 43, 43, 242, 292, 31, 131, 404, 317, 440, 26, 41, 61, 256, 358, 119, 218, 348, 175, 345, 286, 88, 299, 207, 109, 305, 135, 148, 126, 314, 155, 455, 149, 146, 5, 173, 63, 43, 462, 209, 211, 156, 292, 201, 242, 271, 26, 40, 424, 207, 418, 340, 262, 292, 495, 295, 41, 297, 402, 53, 39, 232, 410, 318, 87, 438, 198, 314, 323, 27, 79, 251, 79, 242, 389, 53, 41, 280, 377, 390, 1, 21, 70, 242, 81, 395, 397, 66, 38, 340, 66, 326, 294, 422, 314, 57, 373, 436, 335, 339, 442, 6, 0]
initial_dict =  [' ', '(', ')', ',', '-', '.', '1', '5', '8', '9', 'A', 'F', 'G', 'H', 'I', 'M', 'P', 'R', 'S', 'T', 'V', 'W', 'X', '[', ']', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'k', 'l', 'm', 'n', 'o', 'p', 'r', 's', 't', 'u', 'v', 'w', 'y', 'z', '’', '“']

# Decodificar el mensaje
decoded_message = lzw_decode(encoded_data, initial_dict)
print( "PREGUNTA 7 !!!!" + "\n")
print(decoded_message + "\n")

#PREGUNTA 8 !!!!
# Datos proporcionados
encoded_data = [16, 27, 24, 1, 16, 28, 31, 46, 15, 20, 22, 27, 28, 32, 24, 4, 1, 13, 2, 24, 36, 21, 63, 38, 3, 1, 12, 62, 33, 36, 26, 24, 68, 17, 24, 30, 30, 37, 1, 18, 7, 9, 10, 8, 19, 82, 6, 90, 88, 43, 44, 46, 31, 33, 33, 32, 1, 41, 20, 81, 37, 24, 38, 38, 56, 26, 59, 20, 32, 23, 1, 38, 45, 1, 23, 42, 108, 1, 96, 98, 30, 28, 26, 27, 38, 1, 111, 113, 115, 46, 25, 28, 36, 37, 128, 34, 20, 79, 72, 1, 33, 25, 117, 20, 41, 99, 41, 63, 95, 108, 30, 24, 113, 56, 129, 1, 126, 102, 38, 30, 42, 1, 27, 140, 25, 5, 124, 126, 38, 6, 47, 116, 21, 39, 37, 45, 81, 150, 36, 46, 56, 29, 164, 21, 30, 53, 29, 59, 132, 159, 36, 33, 39, 112, 158, 37, 33, 31, 21, 182, 193, 24, 42, 191, 116, 37, 185, 1, 22, 33, 30, 195, 36, 154, 37, 81, 130, 211, 45, 63, 217, 37, 173, 11, 197, 39, 34, 114, 116, 55, 79, 1, 14, 231, 195, 171, 235, 211, 195, 30, 113, 104, 46, 126, 33, 137, 225, 174, 182, 46, 104, 40, 63, 140, 114, 49, 24, 37, 110, 81, 236, 37, 22, 111, 57, 131, 208, 214, 34, 58, 240, 37, 147, 100, 55, 38, 133, 125, 39, 182, 250, 16, 41, 28, 22, 46, 236, 25, 111, 22, 28, 155, 274, 276, 20, 1, 199, 124, 38, 20, 36, 164, 41, 278, 273, 20, 272, 169, 28, 29, 46, 22, 182, 20, 38, 282, 46, 36, 196, 32, 120, 36, 317, 45, 36, 1, 35, 39, 287, 29, 163, 1, 229, 231, 46, 233, 30, 110, 197, 98, 288, 1, 57, 303, 337, 1, 321, 56, 263, 299, 297, 1, 154, 102, 27, 143, 145, 132, 31, 211, 303, 304, 120, 199, 50, 146, 36, 29, 1, 21, 33, 118, 173, 94, 164, 96, 255, 113, 166, 137, 28, 163, 173, 236, 23, 28, 113, 32, 33, 128, 245, 277, 317, 372, 24, 266, 368, 144, 337, 31, 386, 393, 24, 24, 50, 269, 396, 132, 164, 40, 111, 28, 178, 295, 20, 96, 32, 26, 348, 176, 416, 284, 116, 23, 147, 149, 102, 299, 107, 234, 56, 388, 383, 32, 22, 38, 59, 42, 195, 121, 177, 128, 196, 23, 63, 137, 130, 386, 100, 430, 25, 406, 124, 420, 231, 396, 54, 384, 340, 335, 437, 66, 20, 56, 59, 24, 303, 163, 5, 96, 36, 323, 457, 454, 78, 120, 441, 39, 121, 20, 164, 166, 255, 1, 29, 391, 148, 451, 23, 195, 21, 279, 113, 31, 164, 205, 260, 6, 0]
initial_dict =  [' ', '(', ')', ',', '-', '.', '1', '5', '8', '9', 'A', 'G', 'H', 'I', 'M', 'T', 'W', '[', ']', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'y', '“']
# Decodificar el mensaje
decoded_message = lzw_decode(encoded_data, initial_dict)
print( "PREGUNTA 8 !!!!" + "\n")
print(decoded_message + "\n")
